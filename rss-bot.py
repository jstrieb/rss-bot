#!/usr/bin/python3

import argparse
import cgi
import cgitb
import json
import os
import sys

from typing import Dict

import requests

from groupme import GroupmeBot


###############################################################################
# Global variables
###############################################################################

DEBUG = True


###############################################################################
# Helper Functions
###############################################################################

def parse_args() -> argparse.Namespace:
    """
    Parse command-line arguments
    :return: parsed arguments as generated by argparse module
    """
    parser = argparse.ArgumentParser(description="Manage RSS feeds.")

    parser.add_argument("-c", "--cron", action="store_true",
                        help="Check feeds instead of handling messages")
    parser.add_argument("-f", "--feed_file", action="store",
                        default="~/.rssfeeds.json",
                        help="File with stored feed metadata")

    return parser.parse_args()


def check_feeds(bot: GroupmeBot, feed_filename: str) -> None:
    """
    Check feeds for updates, sending via GroupMe if updated info
    :param bot: bot to send updates with
    :param feed_filename: saved feed data to read from and write to
    """
    try:
        with open(feed_filename, "r") as f:
            feeds = json.load(f)
    except FileNotFoundError:
        feeds = dict()
    print(json.dumps(feeds, indent=2))


def handle_message(bot: GroupmeBot, headers: Dict[str, str]) -> None:
    """
    Handle user commands sent via GroupMe and received over CGI
    :param bot: bot to send replies with
    :param headers: HTTP headers
    """
    pass


###############################################################################
# Main function
###############################################################################

def main(bot_id: str) -> None:
    env = dict(os.environ)
    args = parse_args()
    if bot_id is None:
        raise Exception("No bot ID supplied! Missing RSS_BOT_ID env variable.")
    bot = GroupmeBot(bot_id=bot_id)

    if args.cron or "REQUEST_METHOD" not in env:
        check_feeds(bot, args.feed_file)
    else:
        print("Content-type: text/html\n\n")

        headers = {k[5:].replace("_", "-"): v for k, v in env.items()
                   if k.startswith("HTTP_")}
        handle_message(bot, headers)


if __name__ == "__main__":
    if DEBUG:
        # Display errors in a well-formatted way if debugging
        cgitb.enable()
        main(os.getenv("RSS_BOT_ID", None))
    else:
        try:
            main(os.getenv("RSS_BOT_ID", None))
        # Catch all exceptions so we don't leak errors and cause security vulns
        except:
            pass
